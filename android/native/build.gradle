apply plugin: 'com.android.library'
apply plugin: 'de.undercouch.download'

import org.gradle.internal.os.OperatingSystem

android {
	namespace = "net.minetest"
	compileSdk 34
	ndkVersion "$ndk_version"
	defaultConfig {
		minSdk 21
		targetSdk 34
		externalNativeBuild {
            cmake {
				arguments "-DANDROID_STL=c++_shared",
					"-DENABLE_CURL=1", "-DENABLE_SOUND=1",
					"-DENABLE_TOUCH=1", "-DENABLE_GETTEXT=1",
					"-DBUILD_UNITTESTS=0", "-DENABLE_UPDATE_CHECKER=0"

				if (OperatingSystem.current().isWindows()) {
					arguments "-DGETTEXT_MSGFMT=C:\\dev\\gettext\\bin\\msgfmt.exe"
				}
			}
		}
	}

	externalNativeBuild {
		cmake {
			path file("../../CMakeLists.txt")
		}
	}

	// supported architectures
	splits {
		abi {
			enable true
			reset()
			include 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
		}
	}

	buildTypes {
		release {
			ndk {
				debugSymbolLevel 'SYMBOL_TABLE'
			}
		}
	}
}

// get precompiled deps
/*
task downloadDeps(type: Download) {
	def depsDir = new File(buildDir.parent, 'deps')
	def depsZip = new File(buildDir, 'deps.zip')

	//src 'https://github.com/minetest/minetest_android_deps/releases/download/latest/deps.zip'
	src 'https://github.com/luanti-org/luanti_android_deps/releases/download/latest/deps-lite.zip'
	dest depsZip
	overwrite false

	task getDeps(dependsOn: downloadDeps, type: Copy) {
		depsDir.mkdir()
		from zipTree(depsZip)
		into depsDir
		doFirst { logger.lifecycle('Extracting to {}', depsDir) }
	}
}

preBuild.dependsOn getDeps
*/

clean {
	delete new File(buildDir.parent, 'deps')
}
