apply plugin: 'com.android.application'

import org.gradle.internal.os.OperatingSystem

android {
	compileSdk 34
	//buildToolsVersion '33.0.2'
	ndkVersion "$ndk_version"
	defaultConfig {
		applicationId 'it.matematicasuperpiatta.minetest'
		minSdk 28
		targetSdk 33
		versionName "${versionMajor}.${versionMinor}.${versionPatch}"
		versionCode project.versionCode
	}

	buildFeatures {
		buildConfig = true
	}

	// load properties
	Properties props = new Properties()
	def propfile = file('../local.properties')
	if (propfile.exists())
		props.load(new FileInputStream(propfile))

	if (props.getProperty('keystore') != null) {
		signingConfigs {
			release {
				storeFile file(props['keystore'])
				storePassword props['keystore.password']
				keyAlias props['key']
				keyPassword props['key.password']
			}
		}

		buildTypes {
			release {
				minifyEnabled true
				signingConfig signingConfigs.release
			}
		}
	}

	// for multiple APKs
	splits {
		abi {
			enable true
			reset()
			include 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
		}
	}

	compileOptions {
		sourceCompatibility JavaVersion.VERSION_11
		targetCompatibility JavaVersion.VERSION_11
	}
	namespace 'net.minetest.minetest'
}

task prepareAssets() {
	def assetsFolder = "build/assets"
	def projRoot = rootDir.parent

	// See issue #4638
	def unsupportedLanguages = new File("${projRoot}/src/unsupported_language_list.txt").text.readLines()

	doFirst {
		logger.lifecycle('Preparing assets at {}', assetsFolder)
	}
	doLast {
		copy {
			from "${projRoot}/minetest.conf", "${projRoot}/README.md" into assetsFolder
		}
		copy {
			from "${projRoot}/doc/lgpl-2.1.txt" into assetsFolder
		}
		copy {
			from "${projRoot}/builtin" into "${assetsFolder}/builtin"
		}
		copy {
			from "${projRoot}/games/matematicasuperpiatta" into "${assetsFolder}/games/matematicasuperpiatta"
		}
		copy {
			from "${projRoot}/client/shaders" into "${assetsFolder}/client/shaders"
		}
		copy {
			from "../native/deps/armeabi-v7a/Irrlicht/Shaders" into "${assetsFolder}/client/shaders/Irrlicht"
		}
		copy {
			from "${projRoot}/fonts" include "*.ttf" into "${assetsFolder}/fonts"
		}
		copy {
			from "${projRoot}/textures/base/pack" into "${assetsFolder}/textures/base/pack"
		}

		// compile translations
		fileTree("${projRoot}/po").include("**/*.po").grep {
			it.parentFile.name !in unsupportedLanguages
		}.forEach { poFile ->
			def moPath = "${assetsFolder}/locale/${poFile.parentFile.name}/LC_MESSAGES/"
			file(moPath).mkdirs()
			exec {
				if (OperatingSystem.current().isWindows()) {
					commandLine 'D:\\dev\\gettext\\bin\\msgfmt.exe', '-o', "${moPath}/minetest.mo", poFile
				} else {
					commandLine 'msgfmt', '-o', "${moPath}/minetest.mo", poFile
				}
			}
		}

		file("${assetsFolder}/.nomedia").text = ""
	}

	task zipAssets(dependsOn: prepareAssets, type: Zip) {
		archiveFileName = "Minetest.zip"
		from assetsFolder
		destinationDirectory = file("src/main/assets")
	}
}

preBuild.dependsOn zipAssets
//prepareAssets.dependsOn ':native:getDeps'

// Map for the version code that gives each ABI a value.
import com.android.build.OutputFile

def abiCodes = ['armeabi-v7a': 0, 'arm64-v8a': 1]
android.applicationVariants.all { variant ->
	variant.outputs.each {
		output ->
			def abiName = output.getFilter(OutputFile.ABI)
			output.versionCodeOverride = abiCodes.get(abiName, 0) + variant.versionCode
	}
}

dependencies {
	implementation project(':native')
	implementation 'androidx.appcompat:appcompat:1.6.1'
}
